import json

import binance
import binance.enums
import datetime as dt
import kucoin
import pandas as pd
import telethon

BINANCE_TRADES_COLS = ['Event type', 'Event time', 'Symbol', 'Trade ID', 'Price', 'Quantity', 'Buyer order ID',
                       'Seller order ID', 'Trade time', 'Is the buyer the market maker?', 'Ignore']
STABLE_ASSETS = ['USDT', 'USDC', 'BUSD', 'TUSD', 'USDP']


def get_client(account, fp='cred.json'):
    if account == 'binance':
        with open(fp) as f:
            cred = json.load(f)
            return binance.Client(cred['binance']['key'], cred['binance']['secret'])
    elif account == 'binance_sub':
        with open(fp) as f:
            cred = json.load(f)
            return binance.Client(cred['binance_sub']['key'], cred['binance_sub']['secret'])
    elif account == 'binance_test':
        with open(fp) as f:
            cred = json.load(f)
            return binance.Client(cred['binance_test']['key'], cred['binance_test']['secret'], testnet=True)
    elif account == 'kucoin':
        raise NotImplementedError
    else:
        raise ValueError('Account not found.')


def get_telegram_client(fp='cred.json'):
    with open(fp) as f:
        cred = json.load(f)
        return telethon.TelegramClient('anon', cred['telegram']['key'], cred['telegram']['hash'])


def log(*text):
    print(f'[{dt.datetime.now()}] {" ".join(text)}')


def log_order(response, params, avg_price, base_asset, quote_asset):
    try:
        symbol = response['symbol']
        status = response['status']
        side = params['side']
        order_type = params['type']
        limit_price = response['price']
        avg_price = round(avg_price, 8)
        base_qty = response['executedQty'] if order_type == binance.enums.ORDER_TYPE_MARKET \
            else response['origQty']
        quote_qty = response['cummulativeQuoteQty'] if order_type == binance.enums.ORDER_TYPE_MARKET \
            else round(float(limit_price) * float(base_qty), 8)

        if params['type'] == binance.enums.ORDER_TYPE_MARKET:
            if params['side'] == binance.enums.SIDE_BUY:
                log(f'{status} {symbol} {side} {order_type}, avg price {avg_price}. '
                    f'{quote_qty} {quote_asset} -> {base_qty} {base_asset}. '
                    f'RESPONSE: {response}')
            else:
                log(f'{status} {symbol} {side} {order_type}, avg price {avg_price}. '
                    f'{base_qty} {base_asset} -> {quote_qty} {quote_asset}. '
                    f'RESPONSE: {response}')
        elif params['type'] == binance.enums.ORDER_TYPE_LIMIT:
            if params['side'] == binance.enums.SIDE_BUY:
                log(f'{status} {symbol} {side} {order_type}, limit price {limit_price}. '
                    f'If filled, {quote_qty} {quote_asset} -> {base_qty} {base_asset}. '
                    f'RESPONSE: {response}')
            else:
                log(f'{status} {symbol} {side} {order_type}, limit price {limit_price}. '
                    f'If filled, {base_qty} {base_asset} -> {quote_qty} {quote_asset}. '
                    f'RESPONSE: {response}')
    except:
        log('Order executed, but log is not possible because of an exception occurred.')
