import json

import binance
import kucoin
import pandas as pd

COINS = ['BTC', 'ETH', 'BNB', 'ADA', 'DOT']

BINANCE_TRADES_COLS = ['Event type', 'Event time', 'Symbol', 'Trade ID', 'Price', 'Quantity', 'Buyer order ID',
                       'Seller order ID', 'Trade time', 'Is the buyer the market maker?', 'Ignore']


def get_symbols(symbol, base_asset='USDT'):
    if type(symbol) == list:
        if len(symbol):
            return symbol
        else:
            raise ValueError('List of symbol is empty.')
    elif type(symbol) == str:
        if symbol[:3] == 'top':
            try:
                n_symbols = int(symbol[3:])
                # il codice sotto va riscritto fetchando i veri symbol
                return [coin + base_asset for coin in COINS[:n_symbols]]
            except ValueError:
                raise ValueError('Symbol(s) not recognized.')
        else:
            return [symbol]


def get_client(exchange, fp='cred.json'):
    if exchange == 'binance':
        with open(fp) as f:
            cred = json.load(f)
            return binance.Client(cred['binance']['key'], cred['binance']['secret'])
    elif exchange == 'kucoin':
        raise Exception('Not implemented yet.')
    else:
        raise Exception('Exchange not found.')


def get_quote_quantity(usd_amount: float, symbol: str, other_asset: str = 'USDT') -> str:
    """
    Get the quote asset quantity (returned as a string) for the specified symbol from a given USD amount.
    Use Binance quotes.
    """
    if symbol[-4:] in ['USDT', 'USDC', 'BUSD', 'TUSD', 'USDP']:
        return usd_amount
    client = binance.Client('', '')
    print(f'Getting {symbol} information...')
    info1 = client.get_symbol_info(symbol=symbol)
    if info1:
        base_asset, quote_asset = info1['baseAsset'], info1['quoteAsset']
        print(f'Getting {quote_asset + other_asset} information...')
        info2 = client.get_symbol_info(symbol=quote_asset + other_asset)
        if info2:
            print(f'Getting {quote_asset + other_asset} last price...')
            last_price = float(client.get_ticker(symbol=quote_asset + other_asset)['lastPrice'])
            precision = info2['quoteAssetPrecision']
            quote_quantity = usd_amount / last_price
            return f'{quote_quantity:.{precision}f}'
        else:
            raise Exception(f'Symbol {symbol} not found on Binance.')
    else:
        raise Exception(f'Symbol {symbol} not found on Binance.')
