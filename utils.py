import json

import binance
import binance.enums
import datetime as dt
import kucoin
import pandas as pd
import telethon

BINANCE_TRADES_COLS = ['Event type', 'Event time', 'Symbol', 'Trade ID', 'Price', 'Quantity', 'Buyer order ID',
                       'Seller order ID', 'Trade time', 'Is the buyer the market maker?', 'Ignore']
STABLE_ASSETS = ['USDT', 'USDC', 'BUSD', 'TUSD', 'USDP']


def get_client(account, fp='cred.json'):
    if account == 'binance':
        with open(fp) as f:
            cred = json.load(f)
            return binance.Client(cred['binance']['key'], cred['binance']['secret'])
    elif account == 'binance_sub':
        with open(fp) as f:
            cred = json.load(f)
            return binance.Client(cred['binance_sub']['key'], cred['binance_sub']['secret'])
    elif account == 'binance_test':
        with open(fp) as f:
            cred = json.load(f)
            return binance.Client(cred['binance_test']['key'], cred['binance_test']['secret'], testnet=True)
    elif account == 'kucoin':
        raise NotImplementedError
    else:
        raise ValueError('Account not found.')


def get_telegram_client(fp='cred.json'):
    with open(fp) as f:
        cred = json.load(f)
        return telethon.TelegramClient('anon', cred['telegram']['key'], cred['telegram']['hash'])


def log(text):
    print(f'[{dt.datetime.now()}] {text}')


def log_order(result, params, avg_price, base_asset, quote_asset):
    try:
        symbol = result['symbol']
        status = result['status']
        side = params['side']
        order_type = params['type']
        base_qty = result['executedQty'] if order_type == binance.enums.ORDER_TYPE_MARKET else result['origQty']
        quote_qty = result['cummulativeQuoteQty']
        limit_price = result['price']
        avg_price = round(avg_price, 8)
        if params["type"] == binance.enums.ORDER_TYPE_MARKET:
            if params["type"] == binance.enums.SIDE_BUY:
                log(f'{status} {symbol} {side} {order_type} at average price {avg_price}, '
                    f'received {base_qty} {base_asset} for {quote_qty} {quote_asset}')
            else:
                log(f'{status} {symbol} {side} {order_type} at average price {avg_price}, '
                    f'received {quote_qty} {quote_asset} for {base_qty} {base_asset}')
        elif params["type"] == binance.enums.ORDER_TYPE_LIMIT:
            if params["type"] == binance.enums.SIDE_BUY:
                log(f'{status} {symbol} {side} {order_type} at limit price {limit_price}, '
                    f'If filled, will receive {base_qty} {base_asset} for {quote_qty} {quote_asset}')
            else:
                log(f'{status} {symbol} {side} {order_type} at limit price {limit_price}, '
                    f'If filled, will receive {quote_qty} {quote_asset} for {base_qty} {base_asset}')
    except:
        log('Order executed, but log is not possible because of an exception occurred.')
