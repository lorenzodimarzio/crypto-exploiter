import json

import binance
import kucoin
import pandas as pd
import telethon

BINANCE_TRADES_COLS = ['Event type', 'Event time', 'Symbol', 'Trade ID', 'Price', 'Quantity', 'Buyer order ID',
                       'Seller order ID', 'Trade time', 'Is the buyer the market maker?', 'Ignore']


def get_client(account, fp='cred.json'):
    if account == 'binance':
        with open(fp) as f:
            cred = json.load(f)
            return binance.Client(cred['binance']['key'], cred['binance']['secret'])
    elif account == 'binance_sub':
        with open(fp) as f:
            cred = json.load(f)
            return binance.Client(cred['binance_sub']['key'], cred['binance_sub']['secret'])
    elif account == 'kucoin':
        raise Exception('Not implemented yet.')
    else:
        raise Exception('account not found.')


def get_telegram_client(fp='cred.json'):
    with open(fp) as f:
        cred = json.load(f)
        return telethon.TelegramClient('anon', cred['telegram']['key'], cred['telegram']['hash'])


def log_order(result, params, avg_price, base_asset, quote_asset, test):
    try:
        if test:
            print('[TEST] ', end='')
        if params["type"] == binance.enums.ORDER_TYPE_MARKET:
            if params["type"] == binance.enums.SIDE_BUY:
                print(f'{result["status"]} {params["side"]} {params["type"]} '
                      f'{result["executedQty"]} {base_asset} for {result["cummulativeQuoteQty"]} {quote_asset} '
                      f'at price {avg_price} {base_asset}/{quote_asset}')
            else:
                print(f'{result["status"]} {params["side"]} {params["type"]} '
                      f'{result["cummulativeQuoteQty"]} {quote_asset} for {result["executedQty"]} {base_asset} '
                      f'at price {avg_price} {base_asset}/{quote_asset}')
        elif params["type"] == binance.enums.ORDER_TYPE_LIMIT:
            print(f'{result["status"]} '
                  f'{params["side"]} {params["type"]} {result["origQty"]} {quote_asset} for '
                  f'{result["executedQty"]} {base_asset} at price {result["price"]}')
        print('Object result:', result)
    except:
        if result == {}:
            print('OK')
        else:
            raise Exception('Error.')
