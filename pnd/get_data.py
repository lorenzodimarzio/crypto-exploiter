######################################################################################################################
# Use for collecting trading data from an incoming Pump&Dump.If the pumped pair is known, populate the corresponding
# parameter. Start few time before the event.

# The script saves all the trades executed on a given pair <pnd_pair> of a given exchange <exchange> at filepath
# "data/<pnd_pair>.csv".
# If <pnd_pair> is not given, the script considers all tradable pairs having the quote asset equals to <quote_asset>.
# If <quote_asset> is not given either, the script considers all tradable pairs for the given exchange.
# In this two last cases, each pair will be saved in a separate file.
######################################################################################################################


import os

import binance
import kucoin
import pathlib
import utils


pnd_pair = None         # The pumped pair
quote_asset = 'BTC'     # The quote asset of the pumped pair (not required if <pnd_pair> is given)
exchange = 'binance'    # Must be given


if __name__ == '__main__':

    if exchange == 'binance':
        client = binance.Client()
        info = client.get_exchange_info()
        if pnd_pair:
            symbols = [pnd_pair]
        else:
            symbols = [obj['symbol'] for obj in info['symbols']
                       if obj['status'] == 'TRADING' and obj['symbol'].endswith(quote_asset)]

        twm = binance.ThreadedWebsocketManager()
        twm.start()

        def callback(msg):
            if msg['e'] == 'trade':
                symbol = msg['s']
                with open(f'data/{symbol}.csv', 'a') as f:
                    f.write(','.join(str(v) for v in list(msg.values())) + '\n')
            else:
                print('Unknown msg: ', msg)

        pathlib.Path('data').mkdir(parents=True, exist_ok=True)

        for symbol in symbols:
            with open(f'data/{symbol}.csv', 'w') as f:
                f.write(','.join(utils.BINANCE_TRADES_COLS) + '\n')

        for symbol in symbols:
            twm.start_trade_socket(callback=callback, symbol=symbol)

        twm.join()

    elif exchange == 'kucoin':
        raise Exception('Not implemented yet.')

    else:
        raise Exception('Exchange not found.')
